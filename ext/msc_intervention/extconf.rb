require 'mkmf'

MODSECURITY_LIB_NAME = 'modsecurity'
SO_FUNC = 'msc_init'

def so_name
  @so_name ||= "lib#{MODSECURITY_LIB_NAME}.#{CONFIG['DLEXT']}"
end

def intervention_header_name
  @intervention_header_name ||= 'modsecurity/intervention.h'
end

# raise an exception if one of the paths doesn't exist
def confirm_include_lib include_dir, lib_dir
  File.realpath(File.join include_dir, intervention_header_name)
  File.realpath(File.join lib_dir, so_name)
end

def create_modsec_lib_rb so_lib_path, dst_ruby_file: 'modsec_lib.rb'
  puts "runtime loads #{so_lib_path}"

  # create a direct path to the library, because it's often in a nonstandard location
  ruby_lib_dir = File.join CONFIG['srcdir'], '..', '..', 'lib', 'rodsec'
  File.open File.join(ruby_lib_dir,dst_ruby_file), 'w' do |io|
    io.write <<~EOS
      # Generated by extconf.rb
      module Rodsec
        MODSECURITY_SO_PATH = '#{so_lib_path}'
      end
    EOS
  end
end

def find_header_and_library include_dir, lib_dir
  ok = true
  ok &&= find_header intervention_header_name, include_dir
  ok &&= find_library MODSECURITY_LIB_NAME, SO_FUNC, lib_dir
  ok or abort
end

STANDARD_DIRS = [
  %w[/usr/local/include /usr/local/lib],
  %w[/usr/include       /usr/lib],
]

# get the user config, or failing that the default ModSecurity installation paths
custom_dirs = dir_config 'modsecurity', '/usr/local/modsecurity'

found_dirs = ([custom_dirs] + STANDARD_DIRS).find do |(include_dir, lib_dir)|
  # try to find files from config
  begin
    confirm_include_lib include_dir, lib_dir
    [include_dir, lib_dir]
  rescue
    puts "#{[include_dir, lib_dir]} not found. Continuing..."
  end
end

unless found_dirs
  puts 'Cannot locate libmodsecurity.so'
  abort
end

so_lib_path =
if found_dirs == custom_dirs
  # we have custom dirs, set a specific path for the dlload in Wrapper
  File.join found_dirs.last, so_name
else
  # standard dirs, so do not use a specific path in Wrapper
  so_name
end

# create the file so Wrapper knows where to load the .so
create_modsec_lib_rb so_lib_path

# finally, use find_header and find_library to add the paths to the Makefile
find_header_and_library *found_dirs

# don't need piles of debug info. Or maybe we do. Dunno.
CONFIG['debugflags'] = ''

# argument is the directory in which the .so file will be put
create_makefile 'rodsec/msc_intervention'
